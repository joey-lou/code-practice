from collections import defaultdict
from typing import List, Set


class Node:
    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):
        self.val = val
        self.isLeaf = isLeaf
        self.topLeft = topLeft
        self.topRight = topRight
        self.bottomLeft = bottomLeft
        self.bottomRight = bottomRight


class Solution:
    def recurse(self, ri: int, rj: int, ci: int, cj: int) -> "Node":
        rm = (ri + rj) // 2
        cm = (ci + cj) // 2

        if rj == ri:
            # this is a single cell
            return Node(self.grid[ri][ci], True, None, None, None, None)

        upper_left = self.recurse(ri, rm, ci, cm)
        upper_right = self.recurse(ri, rm, cm + 1, cj)
        lower_left = self.recurse(rm + 1, rj, ci, cm)
        lower_right = self.recurse(rm + 1, rj, cm + 1, cj)

        if (
            upper_left.isLeaf
            and upper_right.isLeaf
            and lower_left.isLeaf
            and lower_right.isLeaf
            and upper_left.val == upper_right.val == lower_left.val == lower_right.val
        ):
            return Node(upper_left.val, True, None, None, None, None)
        return Node(
            upper_left.val, False, upper_left, upper_right, lower_left, lower_right
        )

    def construct(self, grid: List[List[int]]) -> "Node":
        self.grid = grid
        self.n = len(grid)
        return self.recurse(0, self.n - 1, 0, self.n - 1)

    # 126
    LETTERS = [chr(x) for x in range(ord("a"), ord("z") + 1)]

    def get_next_words(self, word: str, word_list_set: Set[str]) -> List[str]:
        retval = []
        for i in range(len(word)):
            for c in self.LETTERS:
                if (
                    c != word[i]
                    and (new_word := word[:i] + c + word[i + 1 :]) in word_list_set
                ):
                    retval.append(new_word)
        return retval

    def findLadders(
        self, beginWord: str, endWord: str, wordList: List[str]
    ) -> List[List[str]]:
        # create graph by creating adjacency dictionary
        # traverse the graph using bfs until reaching endWord
        # graph = self.build_graph_N2(beginWord, wordList)
        # dictionary storing the path up till that node (including itself)
        unseen_words = set(wordList) | set([beginWord])
        if endWord not in unseen_words:
            return []

        front_paths = defaultdict(list)
        front_paths[beginWord].append([beginWord])
        front_queue = {beginWord}

        end_paths = defaultdict(list)
        end_paths[endWord].append([endWord])
        end_queue = {endWord}

        retval = []
        direction = 1
        while front_queue and end_queue and not len(retval):
            if direction == 1:
                queue, curr_paths, other_paths = front_queue, front_paths, end_paths
            else:
                queue, curr_paths, other_paths = end_queue, end_paths, front_paths
            next_words = list(queue)
            unseen_words -= queue  # do not traverse to the same level nodes
            queue.clear()
            for word in next_words:
                for next_word in self.get_next_words(word, unseen_words):
                    # add the new path to node
                    for curr_path in curr_paths[word]:
                        new_path = (
                            (curr_path + [next_word])
                            if direction == 1
                            else ([next_word] + curr_path)
                        )
                        curr_paths[next_word].append(new_path)
                    # check if we connected to the other side
                    for other_path in other_paths[next_word]:
                        for curr_path in curr_paths[word]:
                            retval.append(
                                (curr_path + other_path)
                                if direction == 1
                                else (other_path + curr_path)
                            )
                    queue.add(next_word)

            direction *= -1
        return retval


if __name__ == "__main__":
    Solution().construct(
        [
            [
                0,
                1,
                1,
            ],
            [1, 0],
        ]
    )
    print(
        Solution().findLadders(
            "cet",
            "ism",
            [
                "kid",
                "tag",
                "pup",
                "ail",
                "tun",
                "woo",
                "erg",
                "luz",
                "brr",
                "gay",
                "sip",
                "kay",
                "per",
                "val",
                "mes",
                "ohs",
                "now",
                "boa",
                "cet",
                "pal",
                "bar",
                "die",
                "war",
                "hay",
                "eco",
                "pub",
                "lob",
                "rue",
                "fry",
                "lit",
                "rex",
                "jan",
                "cot",
                "bid",
                "ali",
                "pay",
                "col",
                "gum",
                "ger",
                "row",
                "won",
                "dan",
                "rum",
                "fad",
                "tut",
                "sag",
                "yip",
                "sui",
                "ark",
                "has",
                "zip",
                "fez",
                "own",
                "ump",
                "dis",
                "ads",
                "max",
                "jaw",
                "out",
                "btu",
                "ana",
                "gap",
                "cry",
                "led",
                "abe",
                "box",
                "ore",
                "pig",
                "fie",
                "toy",
                "fat",
                "cal",
                "lie",
                "noh",
                "sew",
                "ono",
                "tam",
                "flu",
                "mgm",
                "ply",
                "awe",
                "pry",
                "tit",
                "tie",
                "yet",
                "too",
                "tax",
                "jim",
                "san",
                "pan",
                "map",
                "ski",
                "ova",
                "wed",
                "non",
                "wac",
                "nut",
                "why",
                "bye",
                "lye",
                "oct",
                "old",
                "fin",
                "feb",
                "chi",
                "sap",
                "owl",
                "log",
                "tod",
                "dot",
                "bow",
                "fob",
                "for",
                "joe",
                "ivy",
                "fan",
                "age",
                "fax",
                "hip",
                "jib",
                "mel",
                "hus",
                "sob",
                "ifs",
                "tab",
                "ara",
                "dab",
                "jag",
                "jar",
                "arm",
                "lot",
                "tom",
                "sax",
                "tex",
                "yum",
                "pei",
                "wen",
                "wry",
                "ire",
                "irk",
                "far",
                "mew",
                "wit",
                "doe",
                "gas",
                "rte",
                "ian",
                "pot",
                "ask",
                "wag",
                "hag",
                "amy",
                "nag",
                "ron",
                "soy",
                "gin",
                "don",
                "tug",
                "fay",
                "vic",
                "boo",
                "nam",
                "ave",
                "buy",
                "sop",
                "but",
                "orb",
                "fen",
                "paw",
                "his",
                "sub",
                "bob",
                "yea",
                "oft",
                "inn",
                "rod",
                "yam",
                "pew",
                "web",
                "hod",
                "hun",
                "gyp",
                "wei",
                "wis",
                "rob",
                "gad",
                "pie",
                "mon",
                "dog",
                "bib",
                "rub",
                "ere",
                "dig",
                "era",
                "cat",
                "fox",
                "bee",
                "mod",
                "day",
                "apr",
                "vie",
                "nev",
                "jam",
                "pam",
                "new",
                "aye",
                "ani",
                "and",
                "ibm",
                "yap",
                "can",
                "pyx",
                "tar",
                "kin",
                "fog",
                "hum",
                "pip",
                "cup",
                "dye",
                "lyx",
                "jog",
                "nun",
                "par",
                "wan",
                "fey",
                "bus",
                "oak",
                "bad",
                "ats",
                "set",
                "qom",
                "vat",
                "eat",
                "pus",
                "rev",
                "axe",
                "ion",
                "six",
                "ila",
                "lao",
                "mom",
                "mas",
                "pro",
                "few",
                "opt",
                "poe",
                "art",
                "ash",
                "oar",
                "cap",
                "lop",
                "may",
                "shy",
                "rid",
                "bat",
                "sum",
                "rim",
                "fee",
                "bmw",
                "sky",
                "maj",
                "hue",
                "thy",
                "ava",
                "rap",
                "den",
                "fla",
                "auk",
                "cox",
                "ibo",
                "hey",
                "saw",
                "vim",
                "sec",
                "ltd",
                "you",
                "its",
                "tat",
                "dew",
                "eva",
                "tog",
                "ram",
                "let",
                "see",
                "zit",
                "maw",
                "nix",
                "ate",
                "gig",
                "rep",
                "owe",
                "ind",
                "hog",
                "eve",
                "sam",
                "zoo",
                "any",
                "dow",
                "cod",
                "bed",
                "vet",
                "ham",
                "sis",
                "hex",
                "via",
                "fir",
                "nod",
                "mao",
                "aug",
                "mum",
                "hoe",
                "bah",
                "hal",
                "keg",
                "hew",
                "zed",
                "tow",
                "gog",
                "ass",
                "dem",
                "who",
                "bet",
                "gos",
                "son",
                "ear",
                "spy",
                "kit",
                "boy",
                "due",
                "sen",
                "oaf",
                "mix",
                "hep",
                "fur",
                "ada",
                "bin",
                "nil",
                "mia",
                "ewe",
                "hit",
                "fix",
                "sad",
                "rib",
                "eye",
                "hop",
                "haw",
                "wax",
                "mid",
                "tad",
                "ken",
                "wad",
                "rye",
                "pap",
                "bog",
                "gut",
                "ito",
                "woe",
                "our",
                "ado",
                "sin",
                "mad",
                "ray",
                "hon",
                "roy",
                "dip",
                "hen",
                "iva",
                "lug",
                "asp",
                "hui",
                "yak",
                "bay",
                "poi",
                "yep",
                "bun",
                "try",
                "lad",
                "elm",
                "nat",
                "wyo",
                "gym",
                "dug",
                "toe",
                "dee",
                "wig",
                "sly",
                "rip",
                "geo",
                "cog",
                "pas",
                "zen",
                "odd",
                "nan",
                "lay",
                "pod",
                "fit",
                "hem",
                "joy",
                "bum",
                "rio",
                "yon",
                "dec",
                "leg",
                "put",
                "sue",
                "dim",
                "pet",
                "yaw",
                "nub",
                "bit",
                "bur",
                "sid",
                "sun",
                "oil",
                "red",
                "doc",
                "moe",
                "caw",
                "eel",
                "dix",
                "cub",
                "end",
                "gem",
                "off",
                "yew",
                "hug",
                "pop",
                "tub",
                "sgt",
                "lid",
                "pun",
                "ton",
                "sol",
                "din",
                "yup",
                "jab",
                "pea",
                "bug",
                "gag",
                "mil",
                "jig",
                "hub",
                "low",
                "did",
                "tin",
                "get",
                "gte",
                "sox",
                "lei",
                "mig",
                "fig",
                "lon",
                "use",
                "ban",
                "flo",
                "nov",
                "jut",
                "bag",
                "mir",
                "sty",
                "lap",
                "two",
                "ins",
                "con",
                "ant",
                "net",
                "tux",
                "ode",
                "stu",
                "mug",
                "cad",
                "nap",
                "gun",
                "fop",
                "tot",
                "sow",
                "sal",
                "sic",
                "ted",
                "wot",
                "del",
                "imp",
                "cob",
                "way",
                "ann",
                "tan",
                "mci",
                "job",
                "wet",
                "ism",
                "err",
                "him",
                "all",
                "pad",
                "hah",
                "hie",
                "aim",
            ],
        )
    )
